//
// Copyright (c) 2020, 2021 Humanitarian OpenStreetMap Team
//
// This file is part of Underpass.
//
//     Underpass is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
//
//     Underpass is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.
//
//     You should have received a copy of the GNU General Public License
//     along with Underpass.  If not, see <https://www.gnu.org/licenses/>.
//

#ifndef __TIMER_HH__
#define __TIMER_HH__

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "unconfig.h"
#endif

#include <string>
#include <vector>
#include <iostream>
#include <iomanip>

#include <boost/date_time.hpp>
#include "boost/date_time/posix_time/posix_time.hpp"
using namespace boost::posix_time;
using namespace boost::gregorian;

/// \file timer.hh
/// \brief Implement a timer for performance testing

/// \class Timer
/// \brief create a performance timer
///
/// This implements a simple timer used for performance testing
/// during development.
class Timer
{
public:
    /// Start a timer, only used for performance analysis
    void startTimer(void) {
        start = boost::posix_time::microsec_clock::local_time();
    };
    /// Stop the timer, used for performance analysis
    long endTimer(void) {
        return endTimer("");
    };
    long endTimer(const std::string &msg) {
        end = boost::posix_time::microsec_clock::local_time();
        boost::posix_time::time_duration delta = end - start;
        average += delta.total_seconds() + (delta.total_milliseconds()/1000);
        if (interval >= counter || interval == 0) {
            // if (interval > 0) {
            //     std::cout << msg << ": Operation took " << average/interval << " milliseconds" << std::endl;
            // } else {
            std::cout << msg << ": Operation took " << std::setprecision(3)
                //<< std::to_string(delta.total_seconds())
                      << (double)delta.total_milliseconds()/1000
                      << " seconds" << std::endl;
            // }
            
            counter = 0;
            average = 0;
        }
        counter++;
        return delta.total_milliseconds();
    };

    /// Set the interval for printing results
    void setInterval(int x) { interval = x; }; 
private:   
    // These are just for performance testing
    ptime start;                ///< Starting timestamop for operation
    ptime end;                  ///< Ending timestamop for operation
    int interval = 0;           ///< Time Interval for long running commands
    int counter = 0;            ///< counter for printing collected statistics
    double average = 0.0;           ///< The average time in each interval
};


#endif  // EOF __TIMER_HH__
