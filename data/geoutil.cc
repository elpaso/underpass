//
// Copyright (c) 2020, 2021 Humanitarian OpenStreetMap Team
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of copyright holder nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "unconfig.h"
#endif

#include <string>
#include <vector>
#include <array>
#include <memory>
#include <iostream>
#include <pqxx/pqxx>
#include <cstdlib>
#include <cstring>
#include <exception>
#include <utility>
#include <fstream>
#include <sstream>
#include <filesystem>
#include <deque>
#include <list>

#include <boost/date_time.hpp>
#include "boost/date_time/posix_time/posix_time.hpp"
using namespace boost::posix_time;
using namespace boost::gregorian;

#include "hotosm.hh"
#include "osmstats/osmstats.hh"
#include "osmstats/changeset.hh"
#include "data/geoutil.hh"
#include <gdal/ogrsf_frmts.h>
#include <ogr_geometry.h>

#include "log.hh"
using namespace logger;

namespace geoutil {

bool
GeoUtil::readFile(const std::string &filespec)
{
    GDALDataset *poDS;
    std::string infile = filespec;
    if (filespec.empty()) {
        infile = "/include.osm";
    }

    log_debug("Opening geo data file: %1%", infile);
    poDS = (GDALDataset*) GDALOpenEx(infile.c_str(), GDAL_OF_VECTOR, NULL, NULL, NULL);
    if (poDS == 0) {
        log_error("couldn't open %1%", infile);
        return false;
    }

    OGRLayer *layer;
    layer = poDS->GetLayerByName("priority");
    if (layer == 0) {
        log_error("Couldn't get layer \"priority\"");
        return false;
    }

    if (layer != 0) {
        for (auto& feature: layer) {
            const OGRGeometry* geom = feature->GetGeometryRef();
            const OGRMultiPolygon *mp = geom->toMultiPolygon();
            std::string wkt = mp->exportToWkt();
            boost::geometry::read_wkt(wkt, boundary);
        }
    }

    // FIXME: return something real
    return false;
}

}       // EOF geoutil

