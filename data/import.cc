//
// Copyright (c) 2020, Humanitarian OpenStreetMap Team
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of copyright holder nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "hotconfig.h"
#endif

#include <string>
#include <vector>
#include <array>
#include <memory>
#include <iostream>
#include <pqxx/pqxx>
#include <libxml++/libxml++.h>

// The Dump handler
#include <osmium/handler/dump.hpp>
#include <osmium/osm/box.hpp>
#include <boost/date_time.hpp>
#include <boost/algorithm/string.hpp>
#include "boost/date_time/posix_time/posix_time.hpp"
using namespace boost::posix_time;
using namespace boost::gregorian;

#include "hotosm.hh"
#include "data/pgsnapshot.hh"
#include "data/import.hh"

namespace import {

// These tables are empty by default, and only used when applying a changeset
// pgsnapshot.state
// id | tstamp | sequence_number | state_timestamp | disabled 
//
// pgsnapshot.locked
// id | started | process | source | location | write_lock
//
// pgsnapshot.actions
// data_type | action | id
//
// pgsnapshot.replication_changes
// id | tstamp | nodes_modified | nodes_added | nodes_deleted | ways_modified | ways_added | ways_deleted | relations_modified | relations_added | relations_deleted | changesets_applied | earliest_timestamp | latest_timestamp
//
// pgsnapshot.sql_changes
// id | tstamp | entity_id | type | changeset_id | change_time | action | query | arguments
bool
OSMHandler::connect(const std::string &dbname, const std::string &server)
{
    std::string args;
    if (dbname.empty()) {
	args = "dbname = pgsnap";
    } else {
	args = "dbname = " + dbname;
    }
    
    try {
	db = new pqxx::connection(args);
	if (db->is_open()) {
	    return true;
	} else {
	    return false;
	}
    } catch (const std::exception &e) {
	std::cerr << e.what() << std::endl;
	return false;
   }    
}


// pgsnapshot.users
// id | name
bool
OSMHandler::addUser(long uid, const std::string &user)
{
    std::string query = "INSERT INTO users VALUES(";
    query += std::to_string(uid) + ",\'" + user;
    query += "\') ON CONFLICT DO NOTHING;";
    worker = new pqxx::work(*db);
    pqxx::result result = worker->exec(query);
    worker->commit();

    // FIXME: this should return a real value
    return false;
}

void
OSMHandler::way(const osmium::Way& way)
{
    // std::cout << "way " << way.id()
    //           << ", Changeset: " << way.changeset()
    //           << ", Version: " << way.version()
    //           << ", UID: " << way.uid()
    //           << ", User: " << way.user()
    //           << ", Timestamp: " << way.timestamp() << std::endl;
    // Setup the tags
    std::string tags;
    for (const osmium::Tag& t : way.tags()) {
        std::cout << "\t" << t.key() << "=" << t.value() << std::endl;
        tags += "\"";
        tags += t.key();
        tags += "\"=>\"";
        // Replace single quotes, as they screw up the query
        std::string tmp = t.value();
        boost::algorithm::replace_all(tmp, "\'", "&quot;");
        // Some values have a double quote, which is unnecesary, and
        // screws up XML parsing.
        boost::algorithm::replace_all(tmp, "\"", "");
        tags += tmp;
        tags += "\", ";
    }
    tags = tags.substr(0, tags.size()-2);

    // Setup the node refs
    std::string refs;
    for (const osmium::NodeRef& nref : way.nodes()) {
        refs += std::to_string(nref.ref()) + ", ";
    }
    refs = refs.substr(0, refs.size()-2);
        
    // Setup the nodes
    std::string refs;
    for (const osmium::NodeRef& nref : way.nodes()) {
        refs += std::to_string(nref.ref()) + ", ";
    }
    refs = refs.substr(0, refs.size()-2);
        
    // pgsnapshot.ways
    // id | version | user_id | tstamp | changeset_id | tags | nodes | bbox | linestring
    //
    // pgsnapshot.way_nodes
    // way_id | node_id | sequence_id
    // std::string query = "INSERT INTO ways(id,version,user_id,tstamp,changeset_id,tags,nodes,bbox,linestring) VALUES(";
    std::string query = "INSERT INTO ways(id,version,user_id,tstamp,changeset_id,tags,nodes) VALUES(";
    query += std::to_string(way.id()) + ",";
    query += std::to_string(way.version());
    query += "," + std::to_string(way.uid());
    query += ",\'" + way.timestamp().to_iso() + "\'";
    query += "," + std::to_string(way.changeset());
    query += ",\'" + tags + "\', ";
    query += "ARRAY[" + refs += "])";
    osmium::Box bbox = way.envelope();
    if (bbox.valid()) {
        std::cout << "VALID" << std::endl;
        osmium::Location bl = bbox.bottom_left();
        osmium::Location tr = bbox.top_right();
    // It's a Polygon if the way is closed
    // query += "ST_GeomFromText('Polygon(";
    // std::cout << "FIXME: " << bl.x() << " : " << osmium::Location::fix_to_double(bl.x()) << std::endl;
    // query += std::to_string(bl.lat()) + "" + std::to_string(bl.lon());
    // query += "ST_GeomFromText('Polygon(" + std::to_string(bl.lon()) + ", " + std::to_string(bl.lat());
    // query += ", " + std::to_string(bl.lon()) + ", " + std::to_string(bl.lat());
    // query += ", " + std::to_string(bl.lon()) + ", " + std::to_string(tr.lat());
    // query += ", " + std::to_string(tr.lon()) + ", " + std::to_string(tr.lat());
    // query += ", " + std::to_string(tr.lon()) + ", " + std::to_string(bl.lat());
    // query += ", " + std::to_string(bl.lon()) + ", " + std::to_string(bl.lat());
    // query += ", 4326)) )\'";
    }
    query += " ON CONFLICT DO NOTHING;";
    std::cout << "Query: " << query << std::endl;

    worker = new pqxx::work(*db);
    pqxx::result result = worker->exec(query);
    int i = 0;
    for (const osmium::NodeRef& nref : way.nodes()) {
        std::cout << "ref:  " << nref.ref() << std::endl;
    }
    worker->commit();

    addUser(way.uid(), way.user());
}

void
OSMHandler::node(const osmium::Node& node) {
    // std::cout << "node " << node.id()
    //           << ", Changeset: " << node.changeset()
    //           << ", Version: " << node.version()
    //           << ", UID: " << node.uid()
    //           << ", User: " << node.user()
    //           << ", Timestamp: " << node.timestamp() << std::endl;

    std::string tags;
    for (const osmium::Tag& t : node.tags()) {
        std::cout << "\t" << t.key() << "=" << t.value() << std::endl;
        tags += "\"";
        tags += t.key();
        tags += "\"=>\"";
        // Replace single quotes, as they screw up the query
        std::string tmp = t.value();
        boost::algorithm::replace_all(tmp, "\'", "&quot;");
        tags += tmp;
        tags += "\", ";
    }
    tags = tags.substr(0, tags.size()-2);

    // pgsnapshot.nodes
    // id | version | user_id | tstamp | changeset_id | tags | geom
    std::string query = "INSERT INTO nodes(id, version, user_id, tstamp, changeset_id, tags, geom) VALUES(";
    query += std::to_string(node.id()) + ",";
    query += std::to_string(node.version());
    query += "," + std::to_string(node.uid());
    query += ",\'" + node.timestamp().to_iso() + "\'";
    query += "," + std::to_string(node.changeset());
    query += ",\'" + tags + "\', ";
    query += "ST_GeomFromText('POINT(" + std::to_string(node.location().lon()) + " ";
    query += std::to_string(node.location().lat()) + ")\'";
    query += ", 4326)) ON CONFLICT DO NOTHING;";
    std::cout << "Query: " << query << std::endl;
    
    worker = new pqxx::work(*db);
    pqxx::result result = worker->exec(query);
    worker->commit();

    addUser(node.uid(), node.user());
}

void
OSMHandler::relation(const osmium::Relation& rel)
{
    std::cout << "rel " << rel.id() << std::endl;
    for (const osmium::Tag& t : rel.tags()) {
        std::cout << "\t" << t.key() << "=" << t.value() << std::endl;
    }
    // pgsnapshot.relations
    // id | version | user_id | tstamp | changeset_id | tags
    //
    // pgsnapshot.relation_members
    // relation_id | member_id | member_type | member_role | sequence_id

}

}       // EOF namespace import

