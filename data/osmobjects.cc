//
// Copyright (c) 2020, 2021 Humanitarian OpenStreetMap Team
//
// This file is part of Underpass.
//
//     Underpass is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
//
//     Underpass is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.
//
//     You should have received a copy of the GNU General Public License
//     along with Underpass.  If not, see <https://www.gnu.org/licenses/>.
//

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "unconfig.h"
#endif

#include <string>
#include <vector>
#include <array>
#include <memory>
#include <iostream>
//#include <pqxx/pqxx>
#ifdef LIBXML
# include <libxml++/libxml++.h>
#endif
#include <boost/date_time.hpp>
#include "boost/date_time/posix_time/posix_time.hpp"
using namespace boost::posix_time;
using namespace boost::gregorian;
#define BOOST_BIND_GLOBAL_PLACEHOLDERS 1
// #include <boost/progress.hpp>
// #include <boost/geometry.hpp>
// typedef boost::geometry::model::d2::point_xy<double> point_t;
// typedef boost::geometry::model::polygon<point_t> polygon_t;
// typedef boost::geometry::model::multi_polygon<polygon_t> multipolygon_t;
// typedef boost::geometry::model::linestring<point_t> linestring_t;

#include "hotosm.hh"
#include "data/osmobjects.hh"

#include "log.hh"
using namespace logger;

namespace osmobjects {

void
OsmObject::dump(void)
{
    log_debug(_("Dumping OsmObject()"));
    if (action == create) {
        log_debug(_("\tAction: Create"));
    } else if (action == modify) {
        log_debug(_("\tAction: Modify"));
    } else if (action == remove) {
        log_debug(_("\tAction: Delete"));
    }
    
    if (type == node) {
        log_debug(_("\tType: OsmNode"));
    } else if (type == way) {
        log_debug(_("\tType: OsmWay"));
    } else if (type == relation) {
        log_debug(_("\tType: OsmRelation"));
    }
    
    log_debug(_("\tID: %1%"), std::to_string(id));
    log_debug(_("\tVersion: %1%"), std::to_string(version));
    log_debug(_("\tTimestamp: %1%"), to_simple_string(timestamp));
    log_debug(_("\tUID: %1%"), std::to_string(uid));
    log_debug(_("\tUser: %1%"), user);
    if (change_id > 0) {
        log_debug(_("\tChange ID: "), std::to_string(change_id));
    }
    if (tags.size() > 0) {
        log_debug(_("\tTags: %1%"), tags.size());
        for (auto it = std::begin(tags); it != std::end(tags); ++it) {
            log_debug("\t\t %1% : %2%", it->first, it->second);
        }
    }
};

// This represents an ODM node. A node has point coordinates, and may
// contain tags if it's a POI.
// void
// OsmWay::makeLinestring(point_t point)
// {
//     // If the first and last ref are the same, it's a closed polygon,
//     // like a building.
//     if (refs.begin() == refs.end()) {
//         boost::geometry::append(polygon, point);
//     } else {
//         boost::geometry::append(linestring, point);
//     }
// };

void
OsmWay::dump(void){
    OsmObject::dump();
    if (refs.size() > 0) {
        log_debug(_("\tRefs: "), refs.size());
        std::string tmp;
        for (auto it = std::begin(refs); it != std::end(refs); ++it) {
            tmp += std::to_string(*it) + ",";
        }
        log_debug("\t%1%", tmp);
    }
};

} // EOF namespace osmobjects
