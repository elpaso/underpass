//
// Copyright (c) 2020, 2021 Humanitarian OpenStreetMap Team
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of copyright holder nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "unconfig.h"
#endif

#include <string>
#include <vector>
#include <array>
#include <memory>
#include <iostream>
//#include <pqxx/pqxx>
#ifdef LIBXML
# include <libxml++/libxml++.h>
#endif
#include <boost/date_time.hpp>
#include "boost/date_time/posix_time/posix_time.hpp"
using namespace boost::posix_time;
using namespace boost::gregorian;
#define BOOST_BIND_GLOBAL_PLACEHOLDERS 1
// #include <boost/progress.hpp>
// #include <boost/geometry.hpp>
// typedef boost::geometry::model::d2::point_xy<double> point_t;
// typedef boost::geometry::model::polygon<point_t> polygon_t;
// typedef boost::geometry::model::multi_polygon<polygon_t> multipolygon_t;
// typedef boost::geometry::model::linestring<point_t> linestring_t;

#include "data/osmobjects.hh"

#include "log.hh"
using namespace logger;

namespace osmobjects {

void
OsmObject::dump(void)
{
    log_debug(_("Dumping OsmObject()"));
    if (action == create) {
        log_debug(_("\tAction: Create"));
    } else if (action == modify) {
        log_debug(_("\tAction: Modify"));
    } else if (action == remove) {
        log_debug(_("\tAction: Delete"));
    }
    
    if (type == node) {
        log_debug(_("\tType: OsmNode"));
    } else if (type == way) {
        log_debug(_("\tType: OsmWay"));
    } else if (type == relation) {
        log_debug(_("\tType: OsmRelation"));
    }
    log_debug(_("\tID: %1%"), id);
    log_debug(_("\tVersion: %1%"), version);
    log_debug(_("\tTimestamp: %1%"), timestamp);
    log_debug(_("\tUID: %1%"), uid);
    log_debug(_("\tUser: %1%"), user);
    if (priority) {
        log_debug(_("\tIn Priority area"));
    } else {
        log_debug(_("\tNot in Priority area"));
    }
    if (change_id > 0) {
        log_debug(_("\tChange ID: "), change_id);
    }
    if (tags.size() > 0) {
        log_debug(_("\tTags: %1%"), tags.size());
        for (auto it = std::begin(tags); it != std::end(tags); ++it) {
            log_debug("\t\t", it->first, " : ", it->second);
        }
    }
};

// This represents an ODM node. A node has point coordinates, and may
// contain tags if it's a POI.
// void
// OsmWay::makeLinestring(point_t point)
// {
//     // If the first and last ref are the same, it's a closed polygon,
//     // like a building.
//     if (refs.begin() == refs.end()) {
//         boost::geometry::append(polygon, point);
//     } else {
//         boost::geometry::append(linestring, point);
//     }
// };

void
OsmWay::dump(void){
    OsmObject::dump();
    if (refs.size() > 0) {
        log_debug(_("\tRefs: "), refs.size());
        log_debug("\t");
        for (auto it = std::begin(refs); it != std::end(refs); ++it) {
            std::cerr << *it << ", " << std::endl;
        }
    }
};

} // EOF namespace osmobjects
