//
// Copyright (c) 2020, Humanitarian OpenStreetMap Team
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of copyright holder nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

#ifndef __OSMOBJECTS_HH__
#define __OSMOBJECTS_HH__

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "hotconfig.h"
#endif

#include <string>
#include <vector>
#include <array>
#include <memory>
#include <iostream>
//#include <pqxx/pqxx>
#ifdef LIBXML
# include <libxml++/libxml++.h>
#endif
#include <boost/date_time.hpp>
#include "boost/date_time/posix_time/posix_time.hpp"
using namespace boost::posix_time;
using namespace boost::gregorian;
#define BOOST_BIND_GLOBAL_PLACEHOLDERS 1
#include <boost/progress.hpp>
#include <boost/geometry.hpp>
#include <boost/geometry/geometries/point_xy.hpp>
#include <boost/geometry/geometries/linestring.hpp>
#include <boost/geometry/geometries/polygon.hpp>
#include <boost/geometry/geometries/geometries.hpp>
typedef boost::geometry::model::d2::point_xy<double> point_t;
typedef boost::geometry::model::polygon<point_t> polygon_t;
typedef boost::geometry::model::multi_point<point_t> mpoint_t;
typedef boost::geometry::model::linestring<point_t> linestring_t;
typedef boost::geometry::model::multi_linestring<linestring_t> mlinestring_t;

#include "hotosm.hh"

namespace osmobjects {

typedef enum {none, create, modify, remove} action_t; // delete is a reserved word
typedef enum {empty, node, way, relation, member} osmtype_t;

/// This a template for the common data fields used by all OSM objects
// template<typename T>
class OsmObject
{
  public:
    void addTag(const std::string &key, const std::string &value) {
        tags[key] = value;
    };

    void setUID(long val) { uid = val; };
    
    action_t action = none;
    osmtype_t type = empty;
    long id = 0;
    int version = 0;
    ptime timestamp;
    long uid = 0;
    std::string user;
    long change_id = 0;    
    std::map<std::string, std::string> tags;

    void dump(void);
};

/// This represents an ODM node. A node has point coordinates, and may
/// contain tags if it's a POI.
class OsmNode: public OsmObject//<OsmNode>
{
public:
    OsmNode(void) { type = node; };
    OsmNode(double lat, double lon) {
        setPoint(lat, lon);
        type = node;
    };

    void setLatitude(double lat) {
        point.set<0>(lat);
    };
    void setLongitude(double lon) {
        point.set<1>(lon);
    };
    void setPoint(double lat, double lon) {
        point.set<0>(lat);
        point.set<1>(lon);
    };
    point_t point;
    void dump(void) {
        std::cout << "\tLocation: " << point.get<0>() << ", " << point.get<1>() << std::endl;
        OsmObject::dump();
    };
};
    
class OsmWay : public OsmObject//<OsmWay>
{
public:
    OsmWay(void) { type = way; refs.clear(); };
    
    std::vector<long> refs;
    linestring_t linestring;
    polygon_t polygon;

    // Ways have references to nodes/ and no coordinates
    void addRef(long ref) {
        refs.push_back(ref);
    };

    bool isClosed(void) {
        if (refs[0] == refs[refs.size()-1]) {
            return true;
        }
        return false;
    };
    // int numPoints(void) { return boost::geometry::num_points(linestring); };
    int numPoints(void) { return refs.size(); };

    void makeLinestring(point_t point);

    double getLength(void) {
        return boost::geometry::length(linestring,
               boost::geometry::strategy::distance::haversine<float>(6371.0));
    };

    void dump(void);
};

class OsmRelation : public OsmObject//<OsmRelation>
{
public:
    OsmRelation(void) { type = relation; };
    
    //. Relations have lists of members
    std::vector<OsmWay> members;
};

}
// EOF namespace osmobjects

#endif  //  __OSMOBJECTS_HH__    
