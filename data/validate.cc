//
// Copyright (c) 2020, 2021 Humanitarian OpenStreetMap Team
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of copyright holder nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "unconfig.h"
#endif

#include <string>
#include <vector>
#include <iostream>

#include <boost/date_time.hpp>
#include "boost/date_time/posix_time/posix_time.hpp"
using namespace boost::posix_time;
using namespace boost::gregorian;

#include "data/osmobjects.hh"
#include "osmstats/osmchange.hh"
#include "data/validate.hh"

// JOSM validator
//   Crossing ways
//   Duplicate Ways
//   Duplicate nodes
//   Duplicate relations
//   Duplicated way nodes
//   Orphan nodes
//   No square building corners

// OSMInspector
//   Empty tag key
//   Unknown highway type
//   Single node way
//   Intersecting ways

// OSMose
//   Overlapping buildings
//   orphan nodes
//   Duplicate geomtry
//   Highway not connected
//   Missing tags
//   Duplicate object
//   
//

/// \namespace validate
namespace validate {

Validate::Validate(std::vector<std::shared_ptr<osmchange::OsmChange>> &changes)
{
    for (auto it = std::begin(changes); it != std::end(changes); ++it) {
        osmchange::OsmChange *change = it->get();
        change->dump();
        if (change->action == create) {
            for (auto it = std::begin(change->nodes); it != std::end(change->nodes); ++it) {
                osmobjects::OsmNode *node = it->get();
                if (node->tags.size() > 0) {
                    std::cout << "Validating New Node ID " << node->id << " has tags!" << std::endl;
                    checkPOI(node);
                } else {
                    continue;
                }
            // for (auto it = std::begin(change->ways); it != std::end(change->ways); ++it) {
            //     OsmWay *way = it->get();
            //     if (way->tags.size() == 0) {
            //         std::cerr << "Validating New Way ID " << way->id << " has no tags!" << std::endl;
            //         checkWay(way);
            //     } else {
            //         continue;
            //     }
            // }
            }       
        }
    }
}

// Check a POI for tags. A node that is part of a way shouldn't have any
// tags, this is to check actual POIs, like a school.
bool
Validate::checkPOI(osmobjects::OsmNode *node)
{
    if (node->tags.size() == 0) {
        std::cerr << "WARNING: POI " << node->id << " has no tags!" << std::endl;
        node_errors.push_back(node->id);
        return false;
    }

    return true;
}

// This checks a way. A way should always have some tags. Often a polygon
// with no tags is a building.
bool
Validate::checkWay(osmobjects::OsmWay *way)
{
    bool result = true;
    for (auto it = std::begin(way->tags); it != std::end(way->tags); ++it) {
        result = checkTag(it->first, it->second);
        if (!result) {
            return result;
        }
    }

    if (way->numPoints() == 5 && way->isClosed() && way->tags.size() == 0) {
        std::cerr << "WARNING: " << way->id << " might be a building!" << std::endl;
        buildings.push_back(way->id);
        return false;
    }
    
    return true;
}

// Check a tag for typical errors
bool
Validate::checkTag(const std::string &key, const std::string &value)
{
    // Check for an empty value
    if (value.empty() && !key.empty()) {
        std::cout << "WARNING: empty value for tag \"" << key << "\"!" << std::endl;
        return false;
    }
    
    // Check for a space in the tag key
    if (key.find(' ') != std::string::npos) {
        std::cout << "WARNING: spaces in tag key \"" << key << "\"!" << std::endl;
        return false;
    }

    return true;
}

} // EOF validate namespace

