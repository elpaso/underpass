//
// Copyright (c) 2020, 2021 Humanitarian OpenStreetMap Team
//
// This file is part of Underpass.
//
//     Underpass is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
//
//     Underpass is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.
//
//     You should have received a copy of the GNU General Public License
//     along with Underpass.  If not, see <https://www.gnu.org/licenses/>.
//

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
#include "unconfig.h"
#endif

#include <chrono>
#include <string>
#include <regex>

#include <pqxx/nontransaction>

#include <boost/iostreams/copy.hpp>
#include <boost/process.hpp>
using namespace boost::process;
#include <boost/format.hpp>
using boost::format;

#include "osm2pgsql.hh"
#include "data/osmobjects.hh"
using namespace osmobjects;

#include "log.hh"
using namespace logger;

namespace osm2pgsql {

const std::string Osm2Pgsql::OSM2PGSQL_DEFAULT_SCHEMA_NAME = "osm2pgsql_pgsql";

logger::LogFile &dbglogfile = logger::LogFile::getDefaultInstance();

const std::regex Osm2Pgsql::TagsParser::tags_escape_re = std::regex(R"re((["=>]))re");

const std::set<std::string> Osm2Pgsql::TagsParser::polygon_tags = {
    "aeroway", "amenity", "building", "harbour",          "historic", "landuse", "leisure", "man_made", "military", "natural",
    "office",  "place",   "power",    "public_transport", "shop",     "sport",   "tourism", "water",    "waterway", "wetland"};

// Process tags, this is the list of tag names that map to table columns
const std::set<std::string> Osm2Pgsql::TagsParser::tags_to_fields = {"access",
                                                                     "addr:housename",
                                                                     "addr:housenumber",
                                                                     "addr:interpolation",
                                                                     "admin_level",
                                                                     "aerialway",
                                                                     "aeroway",
                                                                     "amenity",
                                                                     "area",
                                                                     "barrier",
                                                                     "bicycle",
                                                                     "brand",
                                                                     "bridge",
                                                                     "boundary",
                                                                     "building",
                                                                     "capital",
                                                                     "construction",
                                                                     "covered",
                                                                     "culvert",
                                                                     "cutting",
                                                                     "denomination",
                                                                     "disused",
                                                                     "ele",
                                                                     "embankment",
                                                                     "foot",
                                                                     "generator:source",
                                                                     "harbour",
                                                                     "highway",
                                                                     "historic",
                                                                     "horse",
                                                                     "intermittent",
                                                                     "junction",
                                                                     "landuse",
                                                                     "layer",
                                                                     "leisure",
                                                                     "lock",
                                                                     "man_made",
                                                                     "military",
                                                                     "motorcar",
                                                                     "name",
                                                                     "natural",
                                                                     "office",
                                                                     "oneway",
                                                                     "operator",
                                                                     "place",
                                                                     "population",
                                                                     "power",
                                                                     "power_source",
                                                                     "public_transport",
                                                                     "railway",
                                                                     "ref",
                                                                     "religion",
                                                                     "route",
                                                                     "service",
                                                                     "shop",
                                                                     "sport",
                                                                     "surface",
                                                                     "toll",
                                                                     "tourism",
                                                                     "tower:type",
                                                                     "tunnel",
                                                                     "water",
                                                                     "waterway",
                                                                     "wetland",
                                                                     "width",
                                                                     "wood"

};

const std::map<std::pair<std::string, std::string>, std::pair<bool, int>> Osm2Pgsql::TagsParser::z_index_map = {
    {{"railway", ""}, {5, 1}},
    {{"boundary", "administrative "}, {0, 1}},
    {{"bridge", "yes"}, {10, 0}},
    {{"bridge", "true"}, {10, 0}},
    {{"bridge", "1"}, {10, 0}},
    {{"tunnel", "yes"}, {-10, 0}},
    {{"tunnel", "true"}, {-10, 0}},
    {{"tunnel", "1"}, {-10, 0}},
    {{"highway", "minor"}, {3, 0}},
    {{"highway", "road"}, {3, 0}},
    {{"highway", "unclassified"}, {3, 0}},
    {{"highway", "residential"}, {3, 0}},
    {{"highway", "tertiary_link"}, {4, 0}},
    {{"highway", "tertiary"}, {4, 0}},
    {{"highway", "secondary_link"}, {6, 1}},
    {{"highway", "secondary"}, {6, 1}},
    {{"highway", "primary_link"}, {7, 1}},
    {{"highway", "primary"}, {7, 1}},
    {{"highway", "trunk_link"}, {8, 1}},
    {{"highway", "trunk"}, {8, 1}},
    {{"highway", "motorway_link"}, {9, 1}},
    {{"highway", "motorway"}, {9, 1}}};

Osm2Pgsql::Osm2Pgsql(const std::string &_dburl, const std::string &schema) : pq::Pq(), schema(schema)
{
    if (!connect(_dburl)) {
        log_error(_("Could not connect to osm2pgsql server %1%"), _dburl);
    }
}

ptime
Osm2Pgsql::getLastUpdate()
{
    if (last_update.is_not_a_date_time()) {
        getLastUpdateFromDb();
    }
    return last_update;
}

bool
Osm2Pgsql::updateDatabase(const std::string &osm_changes)
{

    // -l for 4326
    std::string osm2pgsql_update_command{
        "osm2pgsql -l --append -r xml -s -C 300 -G --hstore-all --extra-attributes --middle-schema=" + schema +
        " --output-pgsql-schema=" + schema + " -d postgresql://"};
    // Append DB url in the form: postgresql://[user[:password]@][netloc][:port][,...][/dbname][?param1=value1&...]
    osm2pgsql_update_command.append(dburl);
    // Read from stdin
    osm2pgsql_update_command.append(" -");

    log_debug(_("Executing osm2pgsql, command: %1%"), osm2pgsql_update_command);

    ipstream out;
    ipstream err;
    opstream in;

    child osm2pgsql_update_process(osm2pgsql_update_command, std_out > out, std_err > err, std_in < in);

    in.write(osm_changes.data(), osm_changes.size());
    in.close();
    in.pipe().close();

    // FIXME: make wait_for duration an arg
    bool result{(!osm2pgsql_update_process.running() || osm2pgsql_update_process.wait_for(std::chrono::minutes{1})) &&
                osm2pgsql_update_process.exit_code() == EXIT_SUCCESS};
    if (!result) {
        std::stringstream err_mesg;
        boost::iostreams::copy(err, err_mesg);
        log_error(_("Error running osm2pgsql command %1%\n%2%"), osm2pgsql_update_command, err_mesg.str());
    }
    return result;
}

bool
Osm2Pgsql::updateDatabase(const std::shared_ptr<OsmChangeFile> &osm_changes) const
{
    // Preconditions
    assert(static_cast<bool>(osm_changes));

    if (!isOpen()) {
        log_error(_("Could not update osm2pgsql DB %1%: DB is closed!"), dburl);
        return false;
    }

    for (const auto &change: std::as_const(osm_changes->changes)) {
        switch (change->action) {
            case action_t::modify:
            case action_t::create:
            {
                for (const auto &node: std::as_const(change->nodes)) {
                    upsertNode(node);
                }
                for (const auto &way: std::as_const(change->ways)) {
                    upsertWay(way);
                }
                for (const auto &relation: std::as_const(change->relations)) {
                    upsertRelation(relation);
                }
                break;
            }
            case action_t::remove:
            {
                for (const auto &node: std::as_const(change->nodes)) {
                    removeNode(node);
                }
                for (const auto &way: std::as_const(change->ways)) {
                    removeWay(way);
                }
                for (const auto &relation: std::as_const(change->relations)) {
                    removeRelation(relation);
                }
                break;
            }
            case action_t::none:
            {
                break;
            }
        }
    }

    return true;
}

bool
Osm2Pgsql::upsertWay(const std::shared_ptr<osmobjects::OsmWay> &way) const
{
    // Preconditions
    assert(static_cast<bool>(sdb));

    pqxx::nontransaction worker(*sdb);

    TagsParser parser;
    parser.parse(way->tags, worker);

    std::string refs{"'{"};
    bool is_first{true};
    for (const auto &ref: std::as_const(way->refs)) {
        if (is_first) {
            is_first = false;
        } else {
            refs.append(",");
        }
        refs.append(std::to_string(ref));
    }
    refs.append("}'");

    // First: upsert in middle table
    const std::string middle_sql{str(format(R"sql(
INSERT INTO %1%.planet_osm_ways
  (id, nodes, tags)
  VALUES ($1, %2%, %3%)
ON CONFLICT (id) DO
  UPDATE
  SET nodes = %2%, tags = %3%
  WHERE %1%.planet_osm_ways.id = $1
)sql") % schema % refs % parser.tags_array_literal)};

    // No upsert here because planet_osm_roads/line have no PK ...
    const std::string delete_roads_sql{str(format("DELETE FROM %1%.planet_osm_roads WHERE osm_id = $1") % schema)};
    const std::string delete_line_sql{str(format("DELETE FROM %1%.planet_osm_line WHERE osm_id = $1") % schema)};

    std::string insert_sql;

    if (parser.is_polygon && !way->isClosed()) {
        log_debug(_("Way %1% is tagged as polygon but it isn't closed! Storing as linestring."), way->id);
    }

    if (parser.is_polygon && way->isClosed()) {
        // Insert
        insert_sql = str(format(R"sql(
    INSERT INTO %1%.planet_osm_%2%
      (osm_id, way, tags %3%)
    VALUES ($1, ST_SetSRID( ST_MakePolygon( ST_MakeLine( ARRAY(
      SELECT ST_MakePoint(n.lon/10000000 , n.lat/10000000) FROM %1%.planet_osm_nodes n
      JOIN UNNEST(%6%::bigint[]) WITH ORDINALITY t(id, ord) USING (id) ORDER BY t.ord ))), 4326 ),
    %5% %4%)
    )sql") % schema % "polygon" %
                         parser.tag_field_names % parser.tag_field_values % parser.tags_hstore_literal % refs);

    } else {
        // Decide if it's a road or a line
        const std::string way_type{parser.is_road ? "roads" : "line"};

        // Insert
        insert_sql = str(format(R"sql(
    INSERT INTO %1%.planet_osm_%2%
      (osm_id, way, tags %3%)
    VALUES ($1, ST_SetSRID( ST_MakeLine( ARRAY(
      SELECT ST_MakePoint(n.lon/10000000 , n.lat/10000000) FROM %1%.planet_osm_nodes n
      JOIN UNNEST(%6%::bigint[]) WITH ORDINALITY t(id, ord) USING (id) ORDER BY t.ord )), 4326 ),
    %5% %4%)
    )sql") % schema % way_type %
                         parser.tag_field_names % parser.tag_field_values % parser.tags_hstore_literal % refs);
    }

    std::cerr << middle_sql << std::endl;
    std::cerr << insert_sql << std::endl;

    try {
        worker.exec("BEGIN;");
        worker.exec_params0(middle_sql, way->id);
        worker.exec_params0(delete_line_sql, way->id);
        worker.exec_params0(delete_roads_sql, way->id);
        worker.exec_params0(insert_sql, way->id);
        worker.exec("COMMIT;");
    } catch (const std::exception &ex) {
        log_error(_("Couldn't upsert way/road record: %1%"), ex.what());
        worker.exec("ROLLBACK;");
        return false;
    }

    return true;
}

bool
Osm2Pgsql::upsertNode(const std::shared_ptr<osmobjects::OsmNode> &node) const
{
    // Preconditions
    assert(static_cast<bool>(sdb));

    pqxx::nontransaction worker(*sdb);

    // First: upsert in middle table
    const std::string middle_sql{str(format(R"sql(
  INSERT INTO %1%.planet_osm_nodes
    (id, lon, lat)
    VALUES ($1, $2, $3)
  ON CONFLICT (id) DO
    UPDATE
    SET lon = $2, lat = $3
    WHERE %1%.planet_osm_nodes.id = $1
  )sql") % schema)};

    TagsParser parser;
    parser.parse(node->tags, worker);

    // No upsert here because planet_osm_point has no PK ...
    const std::string delete_sql{str(format(R"sql(DELETE FROM %1%.planet_osm_point WHERE osm_id = $1)sql") % schema)};
    // Insert
    const std::string insert_sql{str(format(R"sql(
  INSERT INTO %1%.planet_osm_point
    (osm_id, way, tags %2%)
    VALUES ($1, public.ST_SetSRID(public.ST_MakePoint($2, $3), 4326), %4% %3%)
  )sql") % schema % parser.tag_field_names %
                                     parser.tag_field_values % parser.tags_hstore_literal)};

    //std::cerr << middle_sql << std::endl;
    //std::cerr << insert_sql << std::endl;

    try {
        worker.exec("BEGIN;");
        worker.exec_params0(middle_sql, node->id, static_cast<int>(node->point.x() * 10000000),
                            static_cast<int>(node->point.y() * 10000000));
        worker.exec_params0(delete_sql, node->id);
        worker.exec_params0(insert_sql, node->id, node->point.x(), node->point.y());
        worker.exec("COMMIT;");
    } catch (const std::exception &ex) {
        log_error(_("Couldn't upsert node/points record: %1%"), ex.what());
        worker.exec("ROLLBACK;");
        return false;
    }
    return true;
}

bool
Osm2Pgsql::upsertRelation(const std::shared_ptr<osmobjects::OsmRelation> &relation) const
{
    return true;
}

bool
Osm2Pgsql::removeWay(const std::shared_ptr<osmobjects::OsmWay> &way) const
{
    return true;
}

bool
Osm2Pgsql::removeNode(const std::shared_ptr<osmobjects::OsmNode> &node) const
{
    // Preconditions
    assert(static_cast<bool>(sdb));

    // upsert in middle nodes table
    const std::string middle_sql{str(format(R"sql(
  DELETE FROM %1%.planet_osm_nodes WHERE id = $1
  )sql") % schema)};
    // upsert in point table
    const std::string sql{str(format(R"sql(
  DELETE FROM %1%.planet_osm_point WHERE osm_id = $1
  )sql") % schema)};
    try {
        pqxx::work worker(*sdb);
        worker.exec_params(middle_sql, node->id);
        worker.exec_params(sql, node->id);
        worker.commit();
    } catch (const std::exception &ex) {
        log_error(_("Couldn't remove node record: %1%"), ex.what());
        return false;
    }
    return true;
}

bool
Osm2Pgsql::removeRelation(const std::shared_ptr<osmobjects::OsmRelation> &relation) const
{
    return true;
}

bool
Osm2Pgsql::connect(const std::string &_dburl)
{
    const bool result{pq::Pq::connect(_dburl)};
    if (result) {
        dburl = _dburl;
    } else {
        dburl.clear();
    }
    return result;
}

bool
Osm2Pgsql::getLastUpdateFromDb()
{
    if (isOpen()) {
        const std::string sql{R"sql(
        SELECT MAX(foo.ts) AS ts FROM(
          SELECT MAX(tags -> 'osm_timestamp') AS ts FROM osm2pgsql_pgsql.planet_osm_point
          UNION
          SELECT MAX(tags -> 'osm_timestamp') AS ts FROM osm2pgsql_pgsql.planet_osm_line
          UNION
          SELECT MAX(tags -> 'osm_timestamp') AS ts FROM osm2pgsql_pgsql.planet_osm_polygon
          UNION
          SELECT MAX(tags -> 'osm_timestamp') AS ts FROM osm2pgsql_pgsql.planet_osm_roads
        ) AS foo
      )sql"};
        try {
            const auto result{query(sql)};
            const auto row{result.at(0)};
            if (row.size() != 1) {
                return false;
            }
            auto timestamp{row[0].as<std::string>()};
            timestamp[10] = ' '; // Drop the 'T' in the middle
            timestamp.erase(19); // Drop the final 'Z'
            last_update = time_from_string(timestamp);
            return last_update != not_a_date_time;
        } catch (std::exception const &e) {
            log_error(_("Error getting last update from osm2pgsql DB: %1%"), e.what());
        }
        return false;
    } else {
        return false;
    }
}

const std::string &
Osm2Pgsql::getSchema() const
{
    return schema;
}

void
Osm2Pgsql::setSchema(const std::string &newSchema)
{
    schema = newSchema;
}

void
Osm2Pgsql::TagsParser::parse(const std::map<std::string, std::string> &tags, const pqxx::nontransaction &worker)
{

    for (const auto &tag: tags) {
        if (z_index_map.find(tag) != z_index_map.cend()) {
            is_road = z_index_map.at(tag).second;
            z_order += z_index_map.at(tag).first;
        }
        if (!tag.second.empty()) {
            if (polygon_tags.find(tag.first) != polygon_tags.cend() || (tag.first == "area" && tag.second == "yes")) {
                is_polygon = true;
            }
            if (tags_array_literal.size() > 2) {
                tags_array_literal.append(",");
            }
            tags_array_literal.append(tag.first + "," + worker.esc(tag.second));
            if (tag.first == "layer") {
                try {
                    z_order += std::stoi(tag.second) * 10;
                } catch (const std::exception &ex) {
                    log_error(_("Error converting layer to integer: %1%"), ex.what());
                }
            }

            // Tags mapped to columns
            if (tags_to_fields.find(tag.first) != tags_to_fields.cend()) {
                tag_field_names.append(separator + worker.quote_name(tag.first));
                const auto value{"'" + worker.esc(tag.second) + "'"};
                tag_field_values.append(separator + value);
                tag_field_updates.append(separator + worker.quote_name(tag.first) + " = " + value);
            } else { // Tags added to "tags"
                const auto tag_value{worker.esc(tag.second)};
                const auto tag_name{worker.esc(tag.first)};
                // Escape = and > and "
                const auto tag_name_safe{std::regex_replace(tag_name, tags_escape_re, R"raw(\$1)raw")};
                const auto tag_value_safe{std::regex_replace(tag_value, tags_escape_re, R"raw(\$1)raw")};
                tags_hstore_literal.append((tags_hstore_literal.size() > 1 ? ", " : "") + tag_name_safe + " => \"" +
                                           tag_value_safe + '"');
            }
        }
    }
    tags_array_literal.append("}'");
    tags_hstore_literal.append("'");
}

} // namespace osm2pgsql
