//
// Copyright (c) 2020, 2021 Humanitarian OpenStreetMap Team
//
// This file is part of Underpass.
//
//     Underpass is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
//
//     Underpass is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.
//
//     You should have received a copy of the GNU General Public License
//     along with Underpass.  If not, see <https://www.gnu.org/licenses/>.
//

#ifndef __VALIDATE_HH__
#define __VALIDATE_HH__

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "unconfig.h"
#endif

#include <string>
#include <vector>
#include <iostream>

#include <boost/date_time.hpp>
#include "boost/date_time/posix_time/posix_time.hpp"
using namespace boost::posix_time;
using namespace boost::gregorian;

#include "data/osmobjects.hh"
#include "osmstats/osmchange.hh"

/// \file validate.hh
/// \brief This class tries to validate the OSM objects
///
/// This class analyzes an OSM object to look for errors. This may
/// include lack of tags on a POI node or a way. This is not an
/// exhaustive test, mostly just a fast sanity-check.

// JOSM validator
//   Crossing ways
//   Duplicate Ways
//   Duplicate nodes
//   Duplicate relations
//   Duplicated way nodes
//   Orphan nodes
//   No square building corners

// OSMInspector
//   Empty tag key
//   Unknown highway type
//   Single node way
//   Interescting ways

// OSMose
//   Overlapping buildings
//   orphan nodes
//   Duplicate geomtry
//   Highway not connected
//   Missing tags
//   Duplicate object
//   
//

/// \namespace validate
namespace validate {

typedef enum {notags, isbuilding } errortype_t;

class Validate
{
public:
    Validate(void) {};
    Validate(std::vector<std::shared_ptr<osmchange::OsmChange>> &changes);

    /// Check a POI for tags. A node that is part of a way shouldn't have any
    /// tags, this is to check actual POIs, like a school.
    bool checkPOI(osmobjects::OsmNode *node);

    /// This checks a way. A way should always have some tags. Often a polygon
    /// is a building 
    bool checkWay(osmobjects::OsmWay *way);

    bool checkTags (std::map<std::string, std::string> tags) {
        bool result;
        for (auto it = std::begin(tags); it != std::end(tags); ++it) {
            result = checkTag(it->first, it->second);
        }
        return result;
    };

    bool checkTag(const std::string &key, const std::string &value);

private:
    std::vector<long> buildings;       ///< 
    std::vector<long> node_errors;     ///< 
    std::vector<long> way_errors;      ///< 
    std::vector<long> relation_errors; ///< 
};

} // EOF validate namespace

#endif  // EOF __VALIDATE_HH__
