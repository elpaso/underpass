//
// Copyright (c) 2020, 2021 Humanitarian OpenStreetMap Team
//
// This file is part of Underpass.
//
//     Underpass is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
//
//     Underpass is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.
//
//     You should have received a copy of the GNU General Public License
//     along with Underpass.  If not, see <https://www.gnu.org/licenses/>.
//

#ifndef __HOTTM_HH__
#define __HOTTM_HH__

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "unconfig.h"
#endif

#include <string>
#include <vector>
#include <array>
#include <memory>
#include <iostream>
#include <pqxx/pqxx>

#include <boost/date_time.hpp>
#include "boost/date_time/posix_time/posix_time.hpp"
using namespace boost::posix_time;
using namespace boost::gregorian;

#include "hottm/tmusers.hh"
#include "hottm/tmteams.hh"
#include "hottm/tmprojects.hh"

namespace tmdb {

class TaskingManager
{
public:
    bool connect(std::string &database);
    std::shared_ptr<std::vector<TMUser>> getUsers(void) { return getUsers(0); };
    std::shared_ptr<std::vector<TMUser>> getUsers(long userid);
    std::shared_ptr<std::vector<TMTeam>> getTeams(void) { return getTeams(0); };
    std::shared_ptr<std::vector<TMTeam>> getTeams(long teamid);
    std::shared_ptr<std::vector<long>> getTeamMembers(long teamid, bool active);
    std::shared_ptr<std::vector<TMProject>> getProjects(void) { return getProjects(0); };
    std::shared_ptr<std::vector<long>> getProjectTeams(long projectid);
    std::shared_ptr<std::vector<TMProject>> getProjects(long projectid);
private:
    pqxx::connection *db;
    pqxx::work *worker;
};
    
} // EOF tmdb namespace

#endif  // EOF __HOTTM_HH__
