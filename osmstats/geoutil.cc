//
// Copyright (c) 2020, Humanitarian OpenStreetMap Team
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of copyright holder nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "hotconfig.h"
#endif

#include <string>
#include <vector>
#include <array>
#include <memory>
#include <iostream>
#include <pqxx/pqxx>
#include <cstdlib>
#include <cstring>
#include <exception>
#include <utility>
#include <fstream>
#include <sstream>
#include <filesystem>
#include <deque>
#include <list>

#include <boost/date_time.hpp>
#include "boost/date_time/posix_time/posix_time.hpp"
using namespace boost::posix_time;
using namespace boost::gregorian;
#include <boost/geometry.hpp>
#include <boost/geometry/geometries/geometries.hpp>

#include "hotosm.hh"
#include "osmstats/osmstats.hh"
#include "osmstats/changeset.hh"
#include "osmstats/geoutil.hh"

namespace geoutil {

bool
GeoUtil::connect(const std::string &dbserver, const std::string &dbname)
{
    std::string args;
    if (dbname.empty()) {
	args = "dbname = geobundaries";
    } else {
	args = "dbname = " + dbname;
    }
    
    try {
	db = new pqxx::connection(args);
	if (db->is_open()) {
            // worker = new pqxx::work(*db);
	    return true;
	} else {
	    return false;
	}
    } catch (const std::exception &e) {
	std::cerr << e.what() << std::endl;
	return false;
   }    
}

bool
GeoUtil::readFile(const std::string &filespec, bool multi)
{
    GDALDataset       *poDS;
    std::string infile = filespec;
    if (filespec.empty()) {
        infile = "/include.osm";
    }

    std::cout << "Opening geo data file: " << infile << std::endl;
    poDS = (GDALDataset*) GDALOpenEx(infile.c_str(), GDAL_OF_VECTOR, NULL, NULL, NULL);
    if (poDS == 0) {
        std::cout << "ERROR:couldn't open " << infile << std::endl;
        return false;
    }

    OGRLayer *layer;
    layer = poDS->GetLayerByName( "multipolygons" );
    if (layer == 0) {
        std::cout << "ERROR: Couldn't get layer \"multipolygons\"" << std::endl;
        return false;
    }

    if (layer != 0) {
        for( auto& feature: layer ) {
            for( auto&& field: *feature ) {
                const OGRGeometry* geom = feature->GetGeometryRef();
                if(NULL != geom) {
                    int eType = wkbFlatten(layer->GetGeomType());
                    // std::cout << "POLY: " << field.GetName() << " : " << field.GetAsString() << std::endl;
                    std::string value = field.GetAsString();
                    if (strcmp(field.GetName(), "other_tags") == 0) {
                        std::size_t pos = value.find(',', 0);
                        if (pos != std::string::npos) {
                            char *token = std::strtok((char *)value.c_str(), ",");
                            while (token != NULL) {
                                token = std::strtok(NULL, ",");
                                if (token) {
                                    std::cout << "FIXME: " << token << std::endl;
                                }
                            }
                        }
                    }
                    char* wkt1 = NULL;
                    const OGRMultiPolygon *mp = geom->toMultiPolygon();
                    if (!multi) {
                        mp->exportToWkt(&wkt1);
                        // boost::geometry::read_wkt(wkt1, boundary);
                    } else {
                        mp->exportToWkt(&wkt1);
                        boost::geometry::read_wkt(wkt1, countries);
=                    }
                    CPLFree(wkt1);
                }
            }
        }
    }
}
    
bool
GeoUtil::focusArea(double lat, double lon)
{

    return false;
}

osmstats::RawCountry
GeoUtil::findCountry(double lat, double lon)
{

}

void
GeoUtil::dump(void)
{
    std::cout << "Boundary: " << boost::geometry::wkt(boundary) << std::endl;
    std::cout << "Countries: " << boost::geometry::wkt(countries) << std::endl;
    // for (auto it = std::begin(countries); it != std::end(countries); ++it) {
    //     std::cout << "Countries: " << boost::geometry::wkt(countries) << std::endl;
    // }
}

}       // EOF geoutil

