//
// Copyright (c) 2020, Humanitarian OpenStreetMap Team
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of copyright holder nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

#ifndef __OSMCHANGE_HH__
#define __OSMCHANGE_HH__

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "hotconfig.h"
#endif

#include <string>
#include <vector>
#include <array>
#include <memory>
#include <iostream>
//#include <pqxx/pqxx>
#ifdef LIBXML
# include <libxml++/libxml++.h>
#endif
#include <boost/date_time.hpp>
#include "boost/date_time/posix_time/posix_time.hpp"
using namespace boost::posix_time;
using namespace boost::gregorian;
#define BOOST_BIND_GLOBAL_PLACEHOLDERS 1
#include <boost/progress.hpp>
#include <boost/geometry.hpp>
#include <boost/geometry/geometries/point_xy.hpp>
#include <boost/geometry/geometries/linestring.hpp>
#include <boost/geometry/geometries/polygon.hpp>
#include <boost/geometry/geometries/geometries.hpp>
typedef boost::geometry::model::d2::point_xy<double> point_t;
typedef boost::geometry::model::polygon<point_t> polygon_t;
typedef boost::geometry::model::multi_point<point_t> mpoint_t;
typedef boost::geometry::model::linestring<point_t> linestring_t;
typedef boost::geometry::model::multi_linestring<linestring_t> mlinestring_t;

#include "hotosm.hh"

namespace osmchange {

typedef enum {none, create, modify, remove} action_t; // delete is a reserved word
typedef enum {empty, node, way, relation, member} osmtype_t;


// These are per user statistics
class ChangeStats
{
public:
    long buildings_added;
    long buildings_modified;
    long roads_added;
    long roads_km_added;
    long roads_km_modified;
    long roads_modified;
    long waterways_km_added;
    long waterways_added;
    long waterways_km_modified;
    long waterways_modified;
    long pois_added;
    long pois_modified;

    void dump(void) {
        std::cout << "Roads Added (km): \t " << roads_km_added << std::endl;
        std::cout << "Roads Modified (km):\t " << roads_km_modified << std::endl;
        std::cout << "Waterways Added (km): \t " << waterways_km_added << std::endl;
        std::cout << "Waterways Modified (km): " << waterways_km_modified << std::endl;
        std::cout << "Roads Added: \t\t " << roads_added << std::endl;
        std::cout << "Roads Modified: \t " << roads_modified << std::endl;
        std::cout << "Waterways Added: \t " << waterways_added << std::endl;
        std::cout << "Waterways Modified: \t " << waterways_modified << std::endl;
        std::cout << "Buildings added: \t " << buildings_added << std::endl;
        std::cout << "Buildings Modified: \t " << buildings_modified << std::endl;
        std::cout << "POIs added: \t\t " << pois_added << std::endl;
        std::cout << "POIs Modified: \t\t " << pois_modified << std::endl;
    };
};

/// This a template for the common data fields used by all OSM objects
// template<typename T>
class OsmObject
{
  public:
    void addTag(const std::string &key, const std::string &value) {
        tags[key] = value;
    };

    void setUID(long val) { uid = val; };
    
    action_t action = none;
    osmtype_t type = empty;
    long id = 0;
    int version = 0;
    ptime timestamp;
    long uid = 0;
    std::string user;
    long change_id = 0;    
    std::map<std::string, std::string> tags;

    void dump(void) {
        std::cout << "Dumping OsmObject()" << std::endl;
        if (action == create) {
            std::cout << "\tAction: Create" << std::endl;
        } else if (action == modify) {
            std::cout << "\tAction: Modify" << std::endl;
        } else if (action == remove) {
            std::cout << "\tAction: Delete" << std::endl;
        }

        if (type == node) {
            std::cout << "\tType: OsmNode" << std::endl;
        } else if (type == way) {
            std::cout << "\tType: OsmWay" << std::endl;
        } else if (type == relation) {
            std::cout << "\tType: OsmRelation" << std::endl;
        }
        
        std::cout << "\tID: " << id << std::endl;
        std::cout << "\tVersion: " << version << std::endl;
        std::cout << "\tTimestamp: " << timestamp << std::endl;
        std::cout << "\tUID: " << uid << std::endl;
        std::cout << "\tUser: " << user << std::endl;
        if (change_id > 0) {
            std::cout << "\tChange ID: " << change_id << std::endl;
        }
        if (tags.size() > 0) {
            std::cout << "\tTags: " << tags.size() << std::endl;            
            for (auto it = std::begin(tags); it != std::end(tags); ++it) {
                std::cout << "\t\t" << it->first << " : " << it->second << std::endl;
            }
        }
    };
};

/// This represents an ODM node. A node has point coordinates, and may
/// contain tags if it's a POI.
class OsmNode: public OsmObject//<OsmNode>
{
public:
    OsmNode(void) { type = node; };
    OsmNode(double lat, double lon) {
        setPoint(lat, lon);
        type = node;
    };

    void setLatitude(double lat) {
        point.set<0>(lat);
    };
    void setLongitude(double lon) {
        point.set<1>(lon);
    };
    void setPoint(double lat, double lon) {
        point.set<0>(lat);
        point.set<1>(lon);
    };
    point_t point;
    void dump(void) {
        std::cout << "\tLocation: " << point.get<0>() << ", " << point.get<1>() << std::endl;
        OsmObject::dump();
    };
};
    
class OsmWay : public OsmObject//<OsmWay>
{
public:
    OsmWay(void) { type = way; refs.clear(); };
    
    std::vector<long> refs;
    linestring_t linestring;
    polygon_t polygon;

    // Ways have references to nodes/ and no coordinates
    void addRef(long ref) {
        refs.push_back(ref);
    };

    void makeLinestring(point_t point) {
        // If the first and last ref are the same, it's a closed polygon,
        // like a building.
        if (refs.begin() == refs.end()) {
            boost::geometry::append(polygon, point);
        } else {
            boost::geometry::append(linestring, point);
        }
    };

    double getLength(void) {
        boost::geometry::length(linestring,
        boost::geometry::strategy::distance::haversine<float>(6371.0));
    };

    void dump(void) {
        OsmObject::dump();
        if (refs.size() > 0) {
            std::cout << "\tRefs: " << refs.size() << std::endl;
            std::cout << "\t";
            for (auto it = std::begin(refs); it != std::end(refs); ++it) {
                std::cout << *it << ", ";
            }
            std::cout << std::endl;
        }
    };
};

class OsmRelation : public OsmObject//<OsmRelation>
{
public:
    OsmRelation(void) { type = relation; };
    
    //. Relations have lists of members
    std::vector<OsmWay> members;
};

class OsmChange
{
public:
    void dump(void);            ///< dump internal data, for debugging only
// protected:

    void setLatitude(double lat) {
        if (type == node) { nodes.back()->setLatitude(lat); }
    };
    void setLongitude(double lon) {
        if (type == node) { nodes.back()->setLongitude(lon); }
    };
    void setTimestamp(const std::string &val) {
        if (type == node) { nodes.back()->timestamp = time_from_string(val); }
        if (type == way) { ways.back()->timestamp = time_from_string(val); }
    };
    void setVersion(double val) {
        if (type == node) { nodes.back()->version = val; }
        if (type == way) { ways.back()->version = val; }
    };
    void addTag(const std::string &key, const std::string &value) {
        if (type == node) { nodes.back()->addTag(key, value); }
        if (type == way) { ways.back()->addTag(key, value); }
    };
    void addRef(long ref) {
        if (type == way) { ways.back()->addRef(ref); }
    };
    void setUID(long val) {
        if (type == node) { nodes.back()->uid = val; }
        if (type == way) { ways.back()->uid = val; }
    };
    void setChangeID(long val) {
        if (type == node) { nodes.back()->id = val; }
        if (type == way) { ways.back()->id = val; }
    };
    void setUser(const std::string &val) {
        if (type == node) { nodes.back()->user = val; }
        if (type == way) { ways.back()->user = val; }
    };
    
    std::shared_ptr<OsmNode> newNode(void) {
        auto tmp = std::make_shared<OsmNode>();
        type = node;
        nodes.push_back(tmp);
        return tmp;
    };
    std::shared_ptr<OsmWay> newWay(void) {
        std::shared_ptr<OsmWay> tmp = std::make_shared<OsmWay>();
        type = way;
        ways.push_back(tmp);
        return tmp;
    };
    std::shared_ptr<OsmRelation> newRelation(void) {
        std::shared_ptr<OsmRelation> tmp = std::make_shared<OsmRelation>();
        type = relation;
        relations.push_back(tmp);
        return tmp;
    };
    
    std::shared_ptr<OsmNode> getNode(int index) { return nodes[index]; };
    std::shared_ptr<OsmNode> currentNode(void) { return nodes.back(); };
    std::shared_ptr<OsmWay> getWay(int index) { return ways[index]; };
    std::shared_ptr<OsmRelation> getRelation(int index) { return relations[index]; };

    action_t action = none;
    osmtype_t type;
    std::vector<std::shared_ptr<OsmNode>> nodes;
    std::vector<std::shared_ptr<OsmWay>> ways;
    std::vector<std::shared_ptr<OsmRelation>> relations;
};


/// This class manages an OSM change file.
#ifdef LIBXML
class OsmChangeFile : public xmlpp::SaxParser
#else
class OsmChangeFile
#endif
{
public:
    OsmChangeFile(void) { };
    OsmChangeFile(const std::string &osc) { readChanges(osc); };

    /// Read a changeset file from disk or memory into internal storage
    bool readChanges(const std::string &osc);
    
#ifdef LIBXML
    /// Called by libxml++ for each element of the XML file
    void on_start_element(const Glib::ustring& name,
                          const AttributeList& properties) override;

//    void on_end_element (const Glib::ustring& name) {
//        std::cout << " on_end_element()" << name << std::endl;
//    };
#endif
    /// Read an istream of the data and parse the XML
    bool readXML(std::istream & xml);

    // Statistics collected for each user
    std::map<long, std::shared_ptr<ChangeStats>> userstats;
    
    std::vector<std::shared_ptr<OsmChange>> changes;
    //
    //std::shared_ptr<OsmObject> object;
    // union object {
    //     std::shared_ptr<std::map<long, OsmNode>> node;
    //     std::shared_ptr<OsmWay> way;
    //     std::shared_ptr<OsmRelation> relation;
    // };

    /// Collect statistics for each user
    void collectStats(void);
    
    void dump(void);            ///< dump internal data, for debugging only
private:
};
    
}       // EOF osmchange

#endif  // EOF __OSMCHANGE_HH__
