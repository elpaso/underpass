//
// Copyright (c) 2020, Humanitarian OpenStreetMap Team
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of copyright holder nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "hotconfig.h"
#endif

#include <string>
#include <vector>
#include <array>
#include <memory>
#include <iostream>
#include <pqxx/pqxx>

#include <boost/date_time.hpp>
#include "boost/date_time/posix_time/posix_time.hpp"
using namespace boost::posix_time;
using namespace boost::gregorian;

#include "osmstats/osmstats.hh"

using namespace apidb;

namespace osmstatsdb {

OsmStats::OsmStats(void)
{
    std::string database = "osmstats";
    connect(database);

    database = "tmsnap";
    osmdb.connect(database);    
}

bool
OsmStats::connect(std::string &database)
{
    if (database.empty()) {
	database = "osmstats";
    }
    
    try {
	std::string args = "dbname = " + database;
	db = new pqxx::connection(args);
	if (db->is_open()) {
	    worker = new pqxx::work(*db);
	    return true;
	} else {
	    return false;
	}
    } catch (const std::exception &e) {
	std::cerr << e.what() << std::endl;
	return false;
   }    
}

bool
OsmStats::populate(void)
{
    ptime start = time_from_string("2010-07-08 13:29:46");
    ptime end = second_clock::local_time();

    long roadsAdded = osmdb.getCount(QueryStats::highway, 0,
                                     QueryStats::totals, start, end);
    long roadKMAdded = osmdb.getLength(QueryStats::highway, 0,
                                       start, end);
    long waterwaysAdded = osmdb.getCount(QueryStats::waterway, 0,
                                         QueryStats::totals, start, end);
    long waterwaysKMAdded = osmdb.getLength(QueryStats::waterway, 0,
                                           start, end);
    long buildingsAdded = osmdb.getCount(QueryStats::waterway, 0,
                                         QueryStats::totals, start, end);
    // std::string sql = "INSERT INTO changeset VALUES(";
}
    
}       // EOF osmstatsdb

