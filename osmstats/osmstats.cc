//
// Copyright (c) 2020, Humanitarian OpenStreetMap Team
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of copyright holder nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "hotconfig.h"
#endif

#include <string>
#include <vector>
#include <array>
#include <memory>
#include <iostream>
#include <pqxx/pqxx>

#include <boost/date_time.hpp>
#include "boost/date_time/posix_time/posix_time.hpp"
using namespace boost::posix_time;
using namespace boost::gregorian;

#include "osmstats/osmstats.hh"

using namespace apidb;

namespace osmstats {

QueryOSMStats::QueryOSMStats(void)
{
    std::string database = "osmstats";
    connect(database);
    database = "tmsnap";
    QueryDB::connect(database);
}

bool
QueryOSMStats::connect(std::string &database)
{
    if (database.empty()) {
	database = "osmstats";
    }
    
    try {
	std::string args = "dbname = " + database;
	db = new pqxx::connection(args);
	if (db->is_open()) {
	    worker = new pqxx::work(*db);
	    return true;
	} else {
	    return false;
	}
    } catch (const std::exception &e) {
	std::cerr << e.what() << std::endl;
	return false;
   }    
}


// Populate new totals
bool
QueryOSMStats::populate(void)
{
    ptime start = time_from_string("2010-07-08 13:29:46");
    ptime end = second_clock::local_time();
    // long roadsAdded = QueryStats::getCount(QueryStats::highway, 0,
    //                                        QueryStats::totals, start, end);
    // long roadKMAdded = QueryStats::getLength(QueryStats::highway, 0,
    //                                          start, end);
    // long waterwaysAdded = QueryStats::getCount(QueryStats::waterway, 0,
    //                                            QueryStats::totals, start, end);
    // long waterwaysKMAdded = QueryStats::getLength(QueryStats::waterway, 0,
    //                                               start, end);
    // long buildingsAdded = QueryStats::getCount(QueryStats::waterway, 0,
    //                                            QueryStats::totals, start, end);
};

bool
QueryOSMStats::getRawChangeSet(std::vector<long> &changeset_ids)
{
    std::string sql = "SELECT id,road_km_added,road_km_modified,waterway_km_added,waterway_km_modified,roads_added,roads_modified,waterways_added,waterways_modified,buildings_added,buildings_modified,pois_added,pois_modified,editor,user_id,created_at,closed_at,verified,augmented_diffs,updated_at FROM raw_changesets WHERE id=ANY(ARRAY[";
    // Build an array string of the IDs
    for (auto it = std::begin(changeset_ids); it != std::end(changeset_ids); ++it) {
        sql += std::to_string(*it);
        if (*it != changeset_ids.back()) {
            sql += ",";
        }
    }
    sql += "]);";

    std::cout << "QUERY: " << sql << std::endl;
    pqxx::result result = worker->exec(sql);
    std::cout << "SIZE: " << result.size() <<std::endl;
    OsmStats stats(result);

    for (auto it = std::begin(result); it != std::end(result); ++it) {
        OsmStats os(it);
        ostats.push_back(os);
    }
}

// #ifdef DEBUG
void
QueryOSMStats::dump(void)
{
    for (auto it = std::begin(ostats); it != std::end(ostats); ++it) {
        it->dump();
    }
}
// #endif

OsmStats::OsmStats(pqxx::const_result_iterator &res)
{
    id = std::stol(res[0].c_str());
    road_km_added = std::stol(res[1].c_str());
    road_km_modified = std::stol(res[2].c_str());
    waterway_km_added = std::stol(res[3].c_str());
    waterway_km_modified = std::stol(res[4].c_str());;
    roads_added = std::stol(res[5].c_str());
    roads_modified = std::stol(res[6].c_str());
    waterways_added = std::stol(res[7].c_str());
    waterways_modified = std::stol(res[8].c_str());
    buildings_added = std::stol(res[9].c_str());
    buildings_modified = std::stol(res[10].c_str());
    pois_added = std::stol(res[11].c_str());
    pois_modified = std::stol(res[12].c_str());
    editor = pqxx::to_string(res[13]);
    user_id = std::stol(res[14].c_str());
    created_at = time_from_string(pqxx::to_string(res[15]));
    closed_at = time_from_string(pqxx::to_string(res[16]));
    // verified = res[17].bool();
    // augmented_diffs = res[18].num();
    updated_at = time_from_string(pqxx::to_string(res[19]));
}

OsmStats::OsmStats(const pqxx::result &res)
{
    id = res[0][0].num();
    road_km_added = res[0][1].num();
    road_km_modified = res[0][2].num();
    waterway_km_added = res[0][3].num();
    waterway_km_modified = res[0][4].num();
    roads_added = res[0][5].num();
    roads_modified = res[0][6].num();
    waterways_added = res[0][7].num();
    waterways_modified = res[0][8].num();
    buildings_added = res[0][9].num();
    buildings_modified = res[0][10].num();
    pois_added = res[0][11].num();
    pois_modified = res[0][12].num();
    editor = pqxx::to_string(res[0][13]);
    user_id = res[0][14].num();
    created_at = time_from_string(pqxx::to_string(res[0][15]));
    closed_at = time_from_string(pqxx::to_string(res[0][16]));
    // verified = res[0][17].bool();
    // augmented_diffs = res[0][18].num();
    updated_at = time_from_string(pqxx::to_string(res[0][19]));
}

void
OsmStats::dump(void)
{
    std::cout << "-----------------------------------" << std::endl;
    std::cout << "changeset id: \t\t " << id << std::endl;
    std::cout << "Roads Added (km): \t " << road_km_added << std::endl;
    std::cout << "Roads Modified (km):\t " <<road_km_modified << std::endl;
    std::cout << "Waterways Added (km): \t " << waterway_km_added << std::endl;
    std::cout << "Waterways Modified (km): " << waterway_km_modified << std::endl;
    std::cout << "Roads Added: \t\t " << roads_added << std::endl;
    std::cout << "Roads Modified: \t " << roads_modified << std::endl;
    std::cout << "Waterways Added: \t " << waterways_added << std::endl;
    std::cout << "Waterways Modified: \t " << waterways_modified << std::endl;
    std::cout << "Buildings added: \t " << buildings_added << std::endl;
    std::cout << "Buildings Modified: \t " << buildings_modified << std::endl;
    std::cout << "POIs added: \t\t " << pois_added << std::endl;
    std::cout << "POIs Modified: \t\t " << pois_modified << std::endl;
    std::cout << "Editor: \t\t " << editor << std::endl;
    std::cout << "User ID: \t\t "  << user_id << std::endl;
    std::cout << "Created At: \t\t " << created_at << std::endl;
    std::cout << "Closed At: \t\t " << closed_at << std::endl;
    std::cout << "Verified: \t\t " << verified << std::endl;
    // std::cout << augmented_diffs << std::endl;
    std::cout << "Updated At: \t\t " << updated_at << std::endl;
}

}       // EOF osmstatsdb

