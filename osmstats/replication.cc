//
// Copyright (c) 2020, Humanitarian OpenStreetMap Team
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of copyright holder nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "hotconfig.h"
#endif

#include <string>
#include <vector>
#include <array>
#include <memory>
#include <iostream>
#include <cstdlib>
#include <cstring>
#include <exception>
#include <utility>
#include <pqxx/pqxx>
#include <fstream>

#include <osmium/io/any_input.hpp>
#include <osmium/builder/osm_object_builder.hpp>
#include <osmium/handler.hpp>
#include <osmium/visitor.hpp>
#include <osmium/io/any_output.hpp>

#include <boost/date_time.hpp>
#include "boost/date_time/posix_time/posix_time.hpp"
#include <boost/beast/core.hpp>
#include <boost/beast/http.hpp>
#include <boost/beast/version.hpp>
#include <boost/asio/connect.hpp>
#include <boost/asio/ip/tcp.hpp>
using namespace boost::posix_time;
using namespace boost::gregorian;
namespace beast = boost::beast;     // from <boost/beast.hpp>
namespace http = beast::http;       // from <boost/beast/http.hpp>
namespace net = boost::asio;        // from <boost/asio.hpp>
using tcp = net::ip::tcp;           // from <boost/asio/ip/tcp.hpp>

#include "hotosm.hh"
#include "osmstats/replication.hh"

namespace replication {

/// parse a state file for a replication file
bool
Replication::readState(std::string &file)
{
    std::ifstream state;
    try {
        state.open(file);
    }
    catch(std::exception& e) {
        std::cout << "ERROR opening " << file << std::endl;
        std::cout << e.what() << std::endl;
        return false;
    }

    std::string line;
    // Ignore the first line
    std::getline(state, line);
    // Second line is the last_run timestamp
    std::getline(state, line);
    // The timestamp is the second field
    std::size_t pos = line.find(" ");
    last_run = time_from_string(line.substr(pos+1));

    // Third and last line is the sequence number
    std::getline(state, line);
    pos = line.find(" ");
    // The sequence is the second field
    sequence = std::stol(line.substr(pos+1));

    state.close();

    return true;
}

/// parse a replication file containing changesets
bool
Replication::readChanges(std::string &file)
{

    return false;
}

/// Add this replication data to the changeset database
bool
Replication::mergeToDB()
{
    return false;
}

/// Download a file from planet
bool
Replication::downloadFile(std::string &file)
{
    return false;
}

}       // EOF replication

