//
// Copyright (c) 2020, Humanitarian OpenStreetMap Team
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of copyright holder nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "hotconfig.h"
#endif

#include <string>
#include <vector>
#include <array>
#include <memory>
#include <iostream>
#include <cstdlib>
#include <cstring>
#include <exception>
#include <utility>
#include <pqxx/pqxx>
#include <fstream>
#include <cctype>
#include <sstream>
#include <libxml++/libxml++.h>
#include <gumbo.h>

#include <osmium/io/any_input.hpp>
#include <osmium/builder/osm_object_builder.hpp>
#include <osmium/handler.hpp>
#include <osmium/visitor.hpp>
#include <osmium/io/any_output.hpp>

#include <boost/date_time.hpp>
#include "boost/date_time/posix_time/posix_time.hpp"
using namespace boost::posix_time;
using namespace boost::gregorian;
#include <boost/filesystem.hpp>
#include <boost/beast/core.hpp>
#include <boost/beast/http.hpp>
#include <boost/beast/version.hpp>
#include <boost/asio/connect.hpp>
#include <boost/asio/ip/tcp.hpp>
#include <boost/asio/ssl/error.hpp>
#include <boost/asio/ssl/stream.hpp>
#include <boost/beast/http/parser.hpp>

namespace beast = boost::beast;     // from <boost/beast.hpp>
namespace net = boost::asio;        // from <boost/asio.hpp>
namespace ssl = boost::asio::ssl;   // from <boost/asio/ssl.hpp>
namespace http = beast::http;       // from <boost/beast/http.hpp>
using tcp = net::ip::tcp;           // from <boost/asio/ip/tcp.hpp>

#include "hotosm.hh"
#include "osmstats/replication.hh"
#include "osmstats/changeset.hh"

namespace replication {

/// parse a replication file containing changesets
bool
Replication::readChanges(const std::string &file)
{

    return false;
}

/// Add this replication data to the changeset database
bool
Replication::mergeToDB()
{
    return false;
}

std::shared_ptr<std::vector<std::string>> &
Replication::getLinks(GumboNode* node, std::shared_ptr<std::vector<std::string>> &links)
{
    if (node->type == GUMBO_NODE_ELEMENT) {
        GumboAttribute* href;
        if (node->v.element.tag == GUMBO_TAG_A &&
            (href = gumbo_get_attribute(&node->v.element.attributes, "href"))) {
            // All the directories are a 3 digit number, and all the files
            // start with a 3 digit number
            if (std::isalnum(href->value[0]) && std::isalnum(href->value[1])) {
                std::cout << href->value << std::endl;
                links->push_back(href->value);
            }
        }
        GumboVector* children = &node->v.element.children;
        for (unsigned int i = 0; i < children->length; ++i) {
            getLinks(static_cast<GumboNode*>(children->data[i]), links);
        }
    }

    return links;
}

/// Download a file from planet
std::shared_ptr<std::vector<std::string>>
Replication::downloadFiles(std::vector<std::string> files, bool text)
{
    // The io_context is required for all I/O
    boost::asio::io_context ioc;

    // The SSL context is required, and holds certificates
    ssl::context ctx{ssl::context::sslv23_client};

    // Verify the remote server's certificate
    ctx.set_verify_mode(ssl::verify_none);
    
    // These objects perform our I/O
    tcp::resolver resolver{ioc};
    ssl::stream<tcp::socket> stream{ioc, ctx};
    
    // Look up the domain name
    auto const results = resolver.resolve(server, std::to_string(port));
    
    // Make the connection on the IP address we get from a lookup
    boost::asio::connect(stream.next_layer(), results.begin(), results.end());

    // Perform the SSL handshake
    stream.handshake(ssl::stream_base::client);

    auto links =  std::make_shared<std::vector<std::string>>();
    for (auto it = std::begin(files); it != std::end(files); ++it) {
        std::cout << "Downloading https://" + server << path + *it << std::endl;
        // Set up an HTTP GET request message
        http::request<http::string_body> req{http::verb::get, path + *it, version };

        req.set(http::field::host, server);
        req.set(http::field::user_agent, BOOST_BEAST_VERSION_STRING);

        // Send the HTTP request to the remote host
        http::write(stream, req);

        // This buffer is used for reading and must be persistant
        boost::beast::flat_buffer buffer;

        // Receive the HTTP response
        boost::beast::error_code ec;
        http::response_parser<http::string_body> parser;
        read_header(stream, buffer, parser);
        read(stream, buffer, parser.base());
        // Parse the HTML content to extract the hyperlinks to
        // the directories and files
        GumboOutput* output = gumbo_parse(parser.get().body().c_str());
        if (text) {
            std::cout << parser.get().body() << std::endl;
            std::string suffix = boost::filesystem::extension(*it);
            // if (suffix == ".txt") {
            //     changeset::StateFile(parser.get().body());
            // }
        } else {
            getLinks(output->root, links);
        }
        gumbo_destroy_output(&kGumboDefaultOptions, output);
        // } else {
        // // Declare a container to hold the response
        // http::response<http::string_body> res;
        // http::read(stream, buffer, res);
        // // Write the message to standard out
        // std::cout << res << std::endl;
        // }
        if (files.size() == 1) {
            path += files[0];
        }
    }

    // Gracefully close the socket
    boost::system::error_code ec;
    stream.shutdown(ec);
    
    return links;
}

}       // EOF replication

