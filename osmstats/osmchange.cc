//
// Copyright (c) 2020, Humanitarian OpenStreetMap Team
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of copyright holder nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "hotconfig.h"
#endif

#include <string>
#include <vector>
#include <array>
#include <memory>
#include <iostream>
#include <codecvt>
#include <locale>
#include <pqxx/pqxx>
#ifdef LIBXML
# include <libxml++/libxml++.h>
#endif
#include <glibmm/convert.h>

#include <boost/date_time.hpp>
#include "boost/date_time/posix_time/posix_time.hpp"
using namespace boost::posix_time;
using namespace boost::gregorian;
#include <boost/geometry.hpp>
#include <boost/geometry/geometries/point_xy.hpp>
#include <boost/geometry/geometries/linestring.hpp>
#include <boost/geometry/geometries/polygon.hpp>
#include <boost/geometry/geometries/geometries.hpp>
#include <boost/property_tree/xml_parser.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/filesystem.hpp>
#include <ogrsf_frmts.h>
#include <boost/iostreams/filtering_streambuf.hpp>
#include <boost/iostreams/filter/gzip.hpp>
#include <boost/progress.hpp>

#include "hotosm.hh"
#include "osmstats/osmchange.hh"
// #include "osmstats/geoutil.hh"

typedef boost::geometry::model::d2::point_xy<double> point_t;
typedef boost::geometry::model::polygon<point_t> polygon_t;
typedef boost::geometry::model::linestring<point_t> linestring_t;

#define BOOST_BIND_GLOBAL_PLACEHOLDERS 1

namespace osmchange {

/// Read a changeset file from disk or memory into internal storage
bool
OsmChangeFile::readChanges(const std::string &file)
{
    setlocale(LC_ALL, "");
    std::ifstream change;
    int size = 0;
    unsigned char *buffer;
    std::cout << "Reading OsmChange file " << file << std::endl;
    std::string suffix = boost::filesystem::extension(file);
    // It's a gzipped file, common for files downloaded from planet
    std::ifstream ifile(file, std::ios_base::in | std::ios_base::binary);
    if (suffix == ".gz") {  // it's a compressed file
        change.open(file,  std::ifstream::in |  std::ifstream::binary);
        try {
            boost::iostreams::filtering_streambuf<boost::iostreams::input> inbuf;
            inbuf.push(boost::iostreams::gzip_decompressor());
            inbuf.push(ifile);
            std::istream instream(&inbuf);
            // std::cout << instream.rdbuf();
            readXML(instream);
        } catch(std::exception& e) {
            std::cout << "ERROR opening " << file << std::endl;
            std::cout << e.what() << std::endl;
            // return false;
        }
    } else {                // it's a text file
        change.open(file, std::ifstream::in);
        readXML(change);
    }
}

bool
OsmChangeFile::readXML(std::istream &xml)
{
    // std::cout << xml.rdbuf();
#ifdef LIBXML
    // libxml calls on_element_start for each node, using a SAX parser,
    // and works well for large files.
    try {
        set_substitute_entities(true);
        parse_stream(xml);
    }
    catch(const xmlpp::exception& ex) {
        std::cerr << "libxml++ exception: " << ex.what() << std::endl;
        int return_code = EXIT_FAILURE;
    }
#else
    // Boost::parser_tree with RapidXML is faster, but builds a DOM tree
    // so loads the entire file into memory. Most replication files for
    // hourly or minutely changes are small, so this is better for that
    // case.
    boost::property_tree::ptree pt;
    boost::property_tree::read_xml(xml, pt);

    if (pt.empty()) {
        std::cerr << "ERROR: XML data is empty!" << std::endl;
        return false;
    }

    boost::progress_display show_progress( 7000 );

    for (auto value: pt.get_child("osmChange")) {
        OsmChange change;
        action_t action;
        if (value.first == "modify") {
            change.action = modify;
        } else if (value.first == "create") {
            change.action = create;
        } else if (value.first == "remove") { // delete is a rerserved word
            change.action = remove;
        }
        for (auto child: value.second) {
            // Process the tags. These don't exist for every element.
            // Both nodes and ways have tags
           for (auto tag: value.second) {
                if (tag.first == "tag") {
                    std::string key = tag.second.get("<xmlattr>.k", "");
                    std::string val = tag.second.get("<xmlattr>.v", "");
                    // static_cast<OsmNode *>(object)->addTag(key, val);
                } else if (tag.first == "nd") {
                    long ref = tag.second.get("<xmlattr>.ref", 0);
                    //object.addRef(ref);
                }
           }
           // Only nodes have coordinates
           if (child.first == "node") {
               double lat = value.second.get("<xmlattr>.lat", 0.0);
               double lon = value.second.get("<xmlattr>.lon", 0.0);
               object = new OsmNode();
               // static_cast<OsmNode *>(object)->addTag(key, val);
           } else if (child.first == "way") {
               object = new OsmWay();
           } else if (child.first == "relation") {
               object = new OsmRelation();
           }
           
           // Process the attributes, which do exist in every element
           // change.id = value.second.get("<xmlattr>.id", 0);
           //change.version = value.second.get("<xmlattr>.version", 0);
           //change.timestamp = value.second.get("<xmlattr>.timestamp",
           //                   boost::posix_time::second_clock::local_time());
        //change.user = value.second.get("<xmlattr>.user", "");
           //change.uid = value.second.get("<xmlattr>.uid", 0);
           //changes.push_back(change);
           change.dump();
           ++show_progress;
        }
    }
#endif
}

#ifdef LIBXML
// Called by libxml++ for each element of the XML file
void
OsmChangeFile::on_start_element(const Glib::ustring& name,
                                const AttributeList& attributes)
{
    // If a change is in progress, apply to to that instance
    if (changes.size() > 0) {
        OsmChange change = changes.back();
        change.action = none;
    }
    // OsmChange change = changes.back();
    std::cout << "NAME: " << name << std::endl;
    if (name == "osmChange") {
        return;
    }
    if (name == "create") {
        OsmChange change;
        change.action = create;
        changes.push_back(change);
        return;
    } else if (name == "modify") {
        OsmChange change;
        change.action = modify;
        changes.push_back(change);
        return;
    } else if (name == "delete") {
        OsmChange change;
        change.action = remove;
        changes.push_back(change);
        return;
    } else if (name == "node") {
        object = new OsmNode();
    } else if (name == "tag") {
        // A tag element has only has 1 attribute, and numbers are stored as
        // strings
        // static_cast<OsmNode *>(object)->addTag(attributes[0].name, attributes[0].value);
    } else if (name == "way") {
        object = new OsmWay();
    } else if (name == "relation") {
        object = new OsmRelation();
    } else if (name == "member") {
        // It's a member of a relation
    } else if (name == "nd") {
        static_cast<OsmWay *>(object)->refs.push_back(std::stol(attributes[0].value));
    }

    // process the attributes
    std::string cache;
    for (const auto& attr_pair : attributes) {
        // Sometimes the data string is unicode
        std::wcout << "\tPAIR: " << attr_pair.name << " = " << attr_pair.value << std::endl;
        // tags use a 'k' for the key, and 'v' for the value
        if (attr_pair.name == "k") {
            cache = attr_pair.value;
            continue;
        } else if (attr_pair.name == "v") {
            if (cache == "timestamp") {
                static_cast<OsmNode *>(object)->timestamp = time_from_string(attr_pair.value);
            } else {
                static_cast<OsmNode *>(object)->tags[cache] = attr_pair.value;
                cache.clear();
            }
        } else if (attr_pair.name == "timestamp") {
            // Clean up the string to something boost can parse
            std::string tmp = attr_pair.value;
            tmp[10] = ' ';      // Drop the 'T' in the middle
            tmp.erase(19);      // Drop the final 'Z'
            static_cast<OsmNode *>(object)->timestamp = time_from_string(tmp);
        } else if (attr_pair.name == "id") {
            static_cast<OsmNode *>(object)->id = std::stol(attr_pair.value);
        } else if (attr_pair.name == "uid") {
            static_cast<OsmNode *>(object)->uid = std::stol(attr_pair.value);
        } else if (attr_pair.name == "version") {
            static_cast<OsmNode *>(object)->version = std::stod(attr_pair.value);
        } else if (attr_pair.name == "user") {
            static_cast<OsmNode *>(object)->user = attr_pair.value;
        } else if (attr_pair.name == "changeset") {
            static_cast<OsmNode *>(object)->change_id = std::stol(attr_pair.value);
        } else if (attr_pair.name == "lat") {
            static_cast<OsmNode *>(object)->setLatitude(std::stod(attr_pair.value));
        } else if (attr_pair.name == "lon") {
            static_cast<OsmNode *>(object)->setLongitude(std::stod(attr_pair.value));
        }
    }

    static_cast<OsmNode *>(object)->dump();
}
#endif  // EOF LIBXML

void
OsmChange::dump(void)
{
    std::cout << "------------" << std::endl;
    if (action == create) {
        std::cout << "\tAction: create" << std::endl;
    } else if(action == modify) {
        std::cout << "\tAction: modify" << std::endl;
    } else if(action == remove) {
        std::cout << "\tAction: delete" << std::endl;
    } else if(action == none) {
        std::cout << "\tAction: data element" << std::endl;
    }
    
    // std::cout << "\tID: " << id << std::endl;
    // std::cout << "\tVersion: " << version << std::endl;
    // std::cout << "\tTimestamp: " << timestamp << std::endl;
    // std::cout << "\tUID: " << uid << std::endl;
    // std::cout << "\tUser: " << user << std::endl;
    // std::cout << "\tChange ID: " << change_id << std::endl;
    // if (lat > 0) {
    //     std::cout << "\tLatitude: " << lat << std::endl;
    // }
    // if (lon > 0) {
    //     std::cout << "\tLongitude: " << lon << std::endl;
    // }
    // if (attrs.size() > 0) {
    //     for (auto it = std::begin(attrs); it != std::end(attrs); ++it) {
    //         std::cout << "\tDumping attrs: " << it->first << std::endl;
    //     }
    // }
    // if (refs.size() > 0) {
    //     for (auto it = std::begin(refs); it != std::end(refs); ++it) {
    //         std::cout << "\tDumping refs: " << *it << std::endl;
    //     }
    // }
    // if (tags.size() > 0) {
    //     std::cout << "\tDumping tags: " << change_id << std::endl;
    //     for (auto it = std::begin(tags); it != std::end(tags); ++it) {
    //         std::cout << it->first << std::endl;
    //     }
    // }
}

void
OsmChangeFile::dump(void)
{
    std::cout << "There are " << changes.size() << " changes" << std::endl;
    for (auto it = std::begin(changes); it != std::end(changes); ++it) {
        it->dump();
    }
}

}       // EOF osmchange

