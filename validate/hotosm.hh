//
// Copyright (c) 2020, 2021 Humanitarian OpenStreetMap Team
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of copyright holder nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

#ifndef __HOTOSM_HH__
#define __HOTOSM_HH__

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "unconfig.h"
#endif

#include <string>
#include <vector>
#include <array>
#include <memory>
#include <iostream>

#include <boost/config.hpp>
#include <boost/dll/alias.hpp>
#include <boost/filesystem/path.hpp>
#include <boost/date_time.hpp>
#include <boost/date_time/posix_time/posix_time.hpp>
#include <boost/dll/runtime_symbol_info.hpp>
using namespace boost::posix_time;
using namespace boost::gregorian;

// MinGW related workaround
#define BOOST_DLL_FORCE_ALIAS_INSTANTIATION

#include "validate.hh"

namespace hotosm {

class Hotosm : public Validate
{
public:
    Hotosm(void);
    ~Hotosm(void) {  };
    // Hotosm(std::vector<std::shared_ptr<osmchange::OsmChange>> &changes);

    /// Check a POI for tags. A node that is part of a way shouldn't have any
    /// tags, this is to check actual POIs, like a school.
    bool checkPOI(osmobjects::OsmNode *node);

    /// This checks a way. A way should always have some tags. Often a polygon
    /// is a building
    bool checkWay(osmobjects::OsmWay *way);

    bool checkTag(const std::string &key, const std::string &value);
    // Factory method
    static std::shared_ptr<Hotosm> create(void) {
	return std::make_shared<Hotosm>();
    };
    // virtual boost::filesystem::path location() const = 0;
//    boost::filesystem::path location() const {
//      return boost::dll::this_line_location();
//  }
private:
    std::vector<long> buildings;       ///< 
    std::vector<long> node_errors;     ///< 
    std::vector<long> way_errors;      ///< 
    std::vector<long> relation_errors; ///<
    std::map<std::string, std::vector<std::string>> tests;
};

BOOST_DLL_ALIAS(Hotosm::create, create_plugin)

} // EOF hotosm namespace

// Factory method. Returns *simple pointer*!
//SharedRef *create(void) {
//    return new SharedRef();
//}

#endif  // EOF __HOTOSM_HH__

// Local Variables:
// mode: C++
// indent-tabs-mode: t
// End:
