//
// Copyright (c) 2020, 2021 Humanitarian OpenStreetMap Team
//
// This file is part of Underpass.
//
//     Underpass is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
//
//     Underpass is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.
//
//     You should have received a copy of the GNU General Public License
//     along with Underpass.  If not, see <https://www.gnu.org/licenses/>.
//

#ifndef __HOTOSM_HH__
#define __HOTOSM_HH__

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
#include "unconfig.h"
#endif

#include <array>
#include <iostream>
#include <memory>
#include <string>
#include <vector>

#include <osmium/osm/location.hpp>
#include <osmium/osm/node.hpp>
#include <osmium/osm/node_ref.hpp>
#include <osmium/osm/node_ref_list.hpp>
#include <osmium/osm/relation.hpp>
#include <osmium/osm/timestamp.hpp>
#include <osmium/osm/way.hpp>
#include <pqxx/pqxx>

#include "boost/date_time/posix_time/posix_time.hpp"
#include <boost/date_time.hpp>
using namespace boost::posix_time;
using namespace boost::gregorian;

#include "hottm.hh"

namespace apidb {

enum mapformats { gpkg, shp, pbf, img, obf, mbtiles, mapsme };

// This manages the connection to to either an OSM database or the
// tasking manager.
class QueryDB {
  public:
    enum object {
        building,
        waterway,
        highway,
        education,
        emergency,
        financial,
        government,
        humanitarian,
        landuse,
        natural,
        power,
        sport,
        transportation,
        water,
        language,
        all
    };
    enum action { changesets, added, modified, deleted, totals };

    // QueryDB(const std::string &database);
    QueryDB(void);
    ~QueryDB(void);

    pqxx::result query(std::string &select);
    bool connect(std::string &database);
    pqxx::connection *db = nullptr;
    pqxx::work *worker = nullptr;

  protected:
    std::array<std::string, 16> keywords;
};

// This talks to an OSM database using the 'apidb' schema,
// which contains the history of changes.
class QueryChanges : public QueryDB {
  public:
    QueryChanges(void);
    ~QueryChanges(void);

    long getCount(object obj, long userid, action op, ptime &start,
                  ptime &end) const;
};

// This talks to an OSM database using the 'pgsnapshot' schema
// with the optional linestring extension.
class QueryStats : public QueryDB {
  public:
    QueryStats(void);
    ~QueryStats(void);

    // Get counts of various things, like buildings, and optionally
    // filter by user id, timestamps, or within a polygon.
    long getCount(object foo, long userid, action op, ptime &start,
                  ptime &end /*, polygon */
    ) const;
    long getLength(object obj, long userid, ptime &start, ptime &end);
    ptime &lastUpdate(long userid, ptime &last);
};

// Query a tasking manager database via postgres for statistics
class QueryTM : public QueryDB {
  public:
    QueryTM(void);
    ~QueryTM(void);

    std::shared_ptr<std::vector<long>> getProjects(long userid);
    // std::shared_ptr<std::vector<long>> getUsers(long projectid)
    // getUserStats(long projectid)
    std::shared_ptr<std::vector<long>> getUserTasks(long projectid,
                                                    long userid);
    std::shared_ptr<std::vector<int>> getUserTeams(long userid);
    std::shared_ptr<tmdb::TMTeam> getTeam(long userid);

    int getTasksMapped(long userid);
    int getTasksValidated(long userid);

    // lastUpdated
    // ptime &dataRegistered
};

// Query a tasking manager database via the REST API for statistics
class QueryTMAPI {
  public:
    QueryTMAPI(void);
    ~QueryTMAPI(void);

    // std::array &getProjects(long userid) const;
    // getUsers(long projectid)
    // getUserStats(long projectid)
    // getUserTasks(long projectid)
    // lastUpdated
    // dataRegistered
};

class BuildOSM : public QueryDB {
  public:
    BuildOSM(void){};
    ~BuildOSM(void){};

    // FIXME: just for debugging
    int getWayNodes(long way_id);
    osmium::Node &getNode(int id);
};

} // namespace apidb
#endif // EOF __HOTOSM_HH__
